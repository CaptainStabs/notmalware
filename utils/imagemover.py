from PyQt5.QtGui import QPixmap, QTransform
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel
from PyQt5.QtCore import Qt, QPoint, QTimer
import random
class DynamicImageMover(QMainWindow):
    def __init__(self, image_path):
        super().__init__()
        self.image = QPixmap(image_path)
        self.label = QLabel()
        self.label.setPixmap(self.image)
        self.label.setAlignment(Qt.AlignCenter)
        
        self.position = QPoint(random.randint(100, 600), random.randint(100, 400))
        self.rotation_angle = random.uniform(0, 360)
        self.size_scale = random.uniform(0.5, 2)  # Scale factor between 0.5 and 2
        
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_position_rotation_and_size)
        self.timer.start(1)  # Update every 100 milliseconds
        
        self.setCentralWidget(self.label)
        self.show()

    def update_position_rotation_and_size(self):
        new_position = QPoint(
            random.randint(100, 600),
            random.randint(100, 400)
        )
        dx = new_position.x() - self.position.x()
        dy = new_position.y() - self.position.y()
        distance = max(abs(dx), abs(dy))
        
        rotation_angle = self.rotation_angle + random.uniform(-10, 10)
        rotation_angle %= 360  # Ensure rotation angle stays within 0-360
        
        scale_factor = self.size_scale * random.uniform(0.9, 1.1)  # Adjust scale factor slightly
        scale_factor = min(max(scale_factor, 0.5), 2)  # Keep scale factor within bounds
        
        transform = QTransform().translate(dx, dy).rotate(rotation_angle).scale(scale_factor, scale_factor)
        self.position = new_position
        self.rotation_angle = rotation_angle
        self.size_scale = scale_factor
        
        self.label.setPixmap(self.image.transformed(transform, Qt.SmoothTransformation))

if __name__ == "__main__":
    app = QApplication([])
    window = DynamicImageMover("images/deer_lasers.png")
    app.exec_()
