from PyQt5 import QtWidgets, QtCore, uic
import sys
import os
import dateutil.parser

os.environ["QT_AUTO_SCREEN_SCALE_FACTOR"] = "1"

class Ui(QtWidgets.QDialog):
    def __init__(self):
        super(Ui, self).__init__()
        uic.loadUi('not_malware.ui', self)
        self.setWindowTitle("Totally Not Malware")
        self.setWindowFlag(QtCore.Qt.WindowContextHelpButtonHint, False)
        self.thanks_button.clicked.connect(self.show_message)
        self.tries = 0
        self.show()

    def show_message(self):
        cardnumber = self.card_number.text()
        expiration = self.expiry_date.text()
        security_code = self.security_code.text()

        if not cardnumber or not expiration or not security_code:
            self.handle_missing_fields(cardnumber, expiration, security_code)
        else:
            self.handle_full_input(cardnumber, expiration, security_code)

    def handle_missing_fields(self, cardnumber, expiration, security_code):
        if not cardnumber and not expiration and not security_code:
            self.show_error("You can't leave everything blank :(")
        elif not cardnumber:
            self.handle_missing_card_number()
        elif not expiration:
            self.handle_missing_expiration_date()

    def handle_full_input(self, cardnumber, expiration, security_code):
        if not self.validate_security_code_length(security_code):
            self.handle_invalid_security_code_length(security_code)
        else:
            self.validate_and_process_expiration(expiration)

    def handle_missing_card_number(self):
        if self.tries < 4:
            self.show_error("Oops! Looks like you forgot the credit card number")
        else:
            self.show_error("You forgot your card number, dumbass.")
        self.tries += 1

    def handle_missing_expiration_date(self):
        if self.tries < 4:
            self.show_error("Oops! Looks like you forgot the expiration date")
        else:
            self.show_error("You forgot the expiration date, dumbass.")
        self.tries += 1

    def validate_security_code_length(self, security_code):
        return len(security_code) in (3, 4)

    def handle_invalid_security_code_length(self, security_code):
        if self.tries < 2:
            if len(security_code) > 4:
                self.show_error("Oops! Looks like you put too many digits")
            elif len(security_code) < 3:
                self.show_error("Oops! Looks like you put too few digits")
            self.tries += 1
        else:
            self.show_error("You've never entered your security code before, have you?")

    def validate_and_process_expiration(self, expiration):
        try:
            date = dateutil.parser.parse(expiration)
            QtWidgets.QMessageBox.information(self, "Transaction Complete", "$12,420.69 was transferred from your account.")
        except:
            self.handle_invalid_expiration_date()

    def handle_invalid_expiration_date(self):
        if self.tries < 2:
            self.show_error("The date you entered is invalid.")
            self.tries += 1
        else:
            self.show_error("You don't understand how dates work, do you?")

    def show_error(self, message):
        QtWidgets.QMessageBox.critical(self, "Error", message)

app = QtWidgets.QApplication(sys.argv)
window = Ui()
app.exec_()
